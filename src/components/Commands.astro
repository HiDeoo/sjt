---
import { CommandDefinitions } from '../libs/commands'
---

<sjt-commands>
  <h2>Available commands</h2>
  <ul>
    {
      Object.values(CommandDefinitions).map((command) => (
        <li>
          <button data-example={command.example}>
            <code>{command.keyword}</code>
          </button>
          {command.description}
        </li>
      ))
    }
  </ul>
  <p>
    Using no command or an unknown command will search the provided text in the Starlight documentation and open the
    most relevant page.
  </p>

  <style>
    h2 {
      font-size: var(--text-xl);
      font-weight: 600;
      line-height: 1.25;
      overflow-wrap: anywhere;
      text-wrap: balance;
    }

    ul {
      margin-block: 1rem 0.75rem;
    }

    button {
      background-color: var(--color-gray-800);
      border-radius: 0.25rem;
      color: var(--color-white);
      display: inline;
      line-height: 1;
      padding: 0.125rem 0.375rem 0.25rem;
      margin-inline-end: 0.125rem;
      min-width: 2rem;
    }

    button:focus-visible {
      outline: 2px solid red;
    }

    code {
      font-family: var(--font-mono);
      font-size: var(--text-xs);
    }

    p {
      line-height: 1.5;
    }
  </style>

  <script>
    customElements.define(
      'sjt-commands',
      class SJTCommands extends HTMLElement {
        #commandInput: HTMLInputElement | null = null

        constructor() {
          super()

          this.#commandInput = document.querySelector<HTMLInputElement>('input#command-input')

          for (const button of this.querySelectorAll('button')) {
            button.addEventListener('click', () => {
              if (this.#commandInput && button.dataset['example']) {
                this.#commandInput.value = button.dataset['example']
                this.#commandInput.focus()
              }
            })
          }
        }
      },
    )
  </script>
</sjt-commands>
